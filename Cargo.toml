[package]
name = "pessimize"
#
# Release checklist:
#
# - Cross-check all public API documentation, update as needed
# - Update changelog
# - Update version number in Cargo.toml
# - Push master, make sure it passes CI
# - Cargo publish
# - Roll an annotated git tag
# - Add a github release
#
version = "2.0.1"
authors = ["Hadrien G. <knights_of_ni@gmx.com>"]
edition = "2021"
rust-version = "1.79.0"
description = "More efficient Rust compiler optimization barriers"
repository = "https://github.com/HadrienG2/pessimize/"
license = "MPL-2.0"
keywords = [ "optimization", "barrier", "black-box", "efficient", "benchmarking" ]
categories = [ "development-tools", "hardware-support", "no-std", "rust-patterns" ]

[badges]
maintenance = { status = "passively-maintained" }

[features]
default = ["std"]
# Assume availability of dynamic memory allocation
alloc = []
# Assume availability of the full standard library
std = ["alloc"]
# Use experimental language features only available in the nightly compiler
nightly = []
# Provide a default implementation of Pessimize for all types (requires nightly)
default_impl = ["nightly"]

[dependencies]
safe_arch = { version = "0.7", optional = true }

[dev-dependencies]
safe_arch = "0.7"
tempfile = "3.21"

[package.metadata.docs.rs]
all-features = true
default-target = "x86_64-unknown-linux-gnu"
targets = ["aarch64-unknown-linux-gnu",
           "arm-unknown-linux-gnueabi",
           "i586-unknown-linux-gnu",
           "riscv32i-unknown-none-elf",
           "riscv64gc-unknown-linux-gnu",
           "x86_64-unknown-linux-gnu"]
